// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using fifaCoinsBestEver;

namespace fifaCoinsBestEver.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("fifaCoinsBestEver.Models.Customer", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("dateOfBirth");

                    b.Property<string>("firstName");

                    b.Property<string>("lastName");

                    b.Property<DateTime?>("modDate");

                    b.Property<long>("userId");

                    b.HasKey("id");

                    b.HasIndex("userId")
                        .IsUnique();

                    b.ToTable("customers");
                });

            modelBuilder.Entity("fifaCoinsBestEver.Models.Product", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("modDate");

                    b.Property<string>("name");

                    b.Property<long>("price");

                    b.Property<long?>("productTypevalue");

                    b.Property<long>("quantity");

                    b.HasKey("id");

                    b.HasIndex("productTypevalue");

                    b.ToTable("products");
                });

            modelBuilder.Entity("fifaCoinsBestEver.Models.Transaction", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("customerid");

                    b.Property<DateTime?>("from");

                    b.Property<bool>("isPaid");

                    b.Property<DateTime?>("modDate");

                    b.Property<long>("productId");

                    b.Property<DateTime?>("to");

                    b.HasKey("id");

                    b.HasIndex("customerid");

                    b.HasIndex("productId")
                        .IsUnique();

                    b.ToTable("transations");
                });

            modelBuilder.Entity("fifaCoinsBestEver.Models.User", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("email");

                    b.Property<DateTime?>("modDate");

                    b.Property<string>("pwd");

                    b.Property<long?>("typevalue");

                    b.Property<string>("username");

                    b.HasKey("id");

                    b.HasIndex("typevalue");

                    b.ToTable("users");
                });

            modelBuilder.Entity("fifaCoinsBestEver.dte.ProductType", b =>
                {
                    b.Property<long>("value")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("name");

                    b.HasKey("value");

                    b.ToTable("productTypes");
                });

            modelBuilder.Entity("fifaCoinsBestEver.dte.UserRoleType", b =>
                {
                    b.Property<long>("value")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("name");

                    b.HasKey("value");

                    b.ToTable("userRoleTypes");
                });

            modelBuilder.Entity("fifaCoinsBestEver.Models.Customer", b =>
                {
                    b.HasOne("fifaCoinsBestEver.Models.User", "user")
                        .WithOne("customer")
                        .HasForeignKey("fifaCoinsBestEver.Models.Customer", "userId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("fifaCoinsBestEver.Models.Product", b =>
                {
                    b.HasOne("fifaCoinsBestEver.dte.ProductType", "productType")
                        .WithMany()
                        .HasForeignKey("productTypevalue");
                });

            modelBuilder.Entity("fifaCoinsBestEver.Models.Transaction", b =>
                {
                    b.HasOne("fifaCoinsBestEver.Models.Customer", "customer")
                        .WithMany("transactions")
                        .HasForeignKey("customerid");

                    b.HasOne("fifaCoinsBestEver.Models.Product", "product")
                        .WithOne("transaction")
                        .HasForeignKey("fifaCoinsBestEver.Models.Transaction", "productId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("fifaCoinsBestEver.Models.User", b =>
                {
                    b.HasOne("fifaCoinsBestEver.dte.UserRoleType", "type")
                        .WithMany()
                        .HasForeignKey("typevalue");
                });
#pragma warning restore 612, 618
        }
    }
}
